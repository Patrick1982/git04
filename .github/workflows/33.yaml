name: Manual Deployment

on:
  push:
    branches:
      - feat* 
  workflow_dispatch:
    inputs:
      environment2:
        description: 'Environment to deploy into'
        type: environment
        default: 'stg'
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  get_version:
    if: github.event.pusher.name != 'reignmachine'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-app-version.outputs.version }}
      chartVersion: ${{ steps.get-chart-version.outputs.chartVersion }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - id: get-app-version
        name: Get version from package.json
        run: |
          VERSION=$(grep version package.json | sed -En "s/\"version\"\: \"(.*)\",/\1/p" | xargs echo -n)
          echo "version=$VERSION-$GITHUB_RUN_ID" >> $GITHUB_OUTPUT
      - id: get-chart-version
        name: Get Helm chart version from package.json
        run: |
          CHART_VER=$(grep chartVersion package.json | sed -En "s/\"chartVersion\"\: \"(.*)\",/\1/p" | xargs echo -n)
          echo "chartVersion=$CHART_VER" >> $GITHUB_OUTPUT

  publish:
    if: github.event.pusher.name != 'reignmachine'
    runs-on: ubuntu-latest
    needs: get_version
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Get repo name
        id: getRepoName
        run: |
          echo "repoName=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_OUTPUT
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.CI_ECR_ROLE_ARN }}
          aws-region: ${{ secrets.CI_AWS_REGION }}
          mask-aws-account-id: no

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REPOSITORY: ${{ steps.getRepoName.outputs.repoName }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.get_version.outputs.version }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy to ${{ inputs.environment }}
    if: github.event.pusher.name != 'reignmachine'
    needs:
      - get_version
      - publish
    env:
      IMAGE_TAG: ${{ needs.get_version.outputs.version }}
      CHART_VERSION: ${{ needs.get_version.outputs.chartVersion }}
      HELM_DEBUG: 1
      ENVIRONMENT: 'dev'
    runs-on: ubuntu-latest
    steps:
      - name: Get repo name
        id: getRepoName
        run: |
          echo "repoName=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> $GITHUB_OUTPUT
      - name: Install helm
        uses: azure/setup-helm@v3
        with:
          version: '3.9.2'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.CI_ECR_ROLE_ARN }}
          aws-region: ${{ secrets.CI_AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Dump kubeconfig into file
        run: |
          echo "${{ secrets.K8S_STAGING_CREDENTIALS }}" > kubeconfig
      - name: Deploy to EKS STAGING 
        env:
          REPOSITORY_URI: ${{ steps.login-ecr.outputs.registry }}/${{ steps.getRepoName.outputs.repoName }}
          CHART_REPO_URI: oci://${{ steps.login-ecr.outputs.registry }}/chart-${{ steps.getRepoName.outputs.repoName }}
          APPLICATION_NAME: ${{ steps.getRepoName.outputs.repoName }}
        run: >2
          helm upgrade $(echo $APPLICATION_NAME) $CHART_REPO_URI
          --version $CHART_VERSION
          --namespace ${ENVIRONMENT} 
          --create-namespace
          --set chart-base.image.repository=$REPOSITORY_URI
          --set chart-base.podAnnotations.commitSha=$GITHUB_SHA
          --set-string chart-base.image.tag=$IMAGE_TAG
          -f ./.chart/values.yaml
          -f ./.chart/values.${ENVIRONMENT}.yaml
          --install
          --kubeconfig kubeconfig
